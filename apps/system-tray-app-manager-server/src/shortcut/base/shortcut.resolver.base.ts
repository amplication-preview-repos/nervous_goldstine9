/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Shortcut } from "./Shortcut";
import { ShortcutCountArgs } from "./ShortcutCountArgs";
import { ShortcutFindManyArgs } from "./ShortcutFindManyArgs";
import { ShortcutFindUniqueArgs } from "./ShortcutFindUniqueArgs";
import { CreateShortcutArgs } from "./CreateShortcutArgs";
import { UpdateShortcutArgs } from "./UpdateShortcutArgs";
import { DeleteShortcutArgs } from "./DeleteShortcutArgs";
import { AppModel } from "../../appModel/base/AppModel";
import { ShortcutService } from "../shortcut.service";
@graphql.Resolver(() => Shortcut)
export class ShortcutResolverBase {
  constructor(protected readonly service: ShortcutService) {}

  async _shortcutsMeta(
    @graphql.Args() args: ShortcutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Shortcut])
  async shortcuts(
    @graphql.Args() args: ShortcutFindManyArgs
  ): Promise<Shortcut[]> {
    return this.service.shortcuts(args);
  }

  @graphql.Query(() => Shortcut, { nullable: true })
  async shortcut(
    @graphql.Args() args: ShortcutFindUniqueArgs
  ): Promise<Shortcut | null> {
    const result = await this.service.shortcut(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Shortcut)
  async createShortcut(
    @graphql.Args() args: CreateShortcutArgs
  ): Promise<Shortcut> {
    return await this.service.createShortcut({
      ...args,
      data: {
        ...args.data,

        appField: args.data.appField
          ? {
              connect: args.data.appField,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Shortcut)
  async updateShortcut(
    @graphql.Args() args: UpdateShortcutArgs
  ): Promise<Shortcut | null> {
    try {
      return await this.service.updateShortcut({
        ...args,
        data: {
          ...args.data,

          appField: args.data.appField
            ? {
                connect: args.data.appField,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shortcut)
  async deleteShortcut(
    @graphql.Args() args: DeleteShortcutArgs
  ): Promise<Shortcut | null> {
    try {
      return await this.service.deleteShortcut(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AppModel, {
    nullable: true,
    name: "appField",
  })
  async getAppField(
    @graphql.Parent() parent: Shortcut
  ): Promise<AppModel | null> {
    const result = await this.service.getAppField(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
