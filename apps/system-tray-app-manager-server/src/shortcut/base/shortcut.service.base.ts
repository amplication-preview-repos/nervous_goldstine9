/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Shortcut as PrismaShortcut,
  AppModel as PrismaAppModel,
} from "@prisma/client";

export class ShortcutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShortcutCountArgs, "select">): Promise<number> {
    return this.prisma.shortcut.count(args);
  }

  async shortcuts<T extends Prisma.ShortcutFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShortcutFindManyArgs>
  ): Promise<PrismaShortcut[]> {
    return this.prisma.shortcut.findMany<Prisma.ShortcutFindManyArgs>(args);
  }
  async shortcut<T extends Prisma.ShortcutFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShortcutFindUniqueArgs>
  ): Promise<PrismaShortcut | null> {
    return this.prisma.shortcut.findUnique(args);
  }
  async createShortcut<T extends Prisma.ShortcutCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShortcutCreateArgs>
  ): Promise<PrismaShortcut> {
    return this.prisma.shortcut.create<T>(args);
  }
  async updateShortcut<T extends Prisma.ShortcutUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShortcutUpdateArgs>
  ): Promise<PrismaShortcut> {
    return this.prisma.shortcut.update<T>(args);
  }
  async deleteShortcut<T extends Prisma.ShortcutDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ShortcutDeleteArgs>
  ): Promise<PrismaShortcut> {
    return this.prisma.shortcut.delete(args);
  }

  async getAppField(parentId: string): Promise<PrismaAppModel | null> {
    return this.prisma.shortcut
      .findUnique({
        where: { id: parentId },
      })
      .appField();
  }
}
